# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

name: build_all_offline_apt_scheduled

on:
  schedule:
    - cron: '*/30 * * * *'

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17453/w_BaseKit_p_2021.1.0.2664_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17392/w_HPCKit_p_2021.1.0.2682_offline.exe
  WINDOWS_IOTKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17406/w_IoTKit_p_2021.1.0.1220_offline.exe
  WINDOWS_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17405/w_RenderKit_p_2021.1.0.626_offline.exe
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17431/l_BaseKit_p_2021.1.0.2659_offline.sh
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17427/l_HPCKit_p_2021.1.0.2684_offline.sh
  LINUX_IOTKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17420/l_IoTKit_p_2021.1.0.2658_offline.sh
  LINUX_AIKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17421/l_AIKit_p_2021.1.0.935_offline.sh
  LINUX_DLFDKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17399/l_DLFDKit_p_2021.1.0.1920_offline.sh
  LINUX_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17448/l_RenderKit_p_2021.1.0.627_offline.sh
  MACOS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17426/m_BaseKit_p_2021.1.0.2427_offline.dmg
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17398/m_HPCKit_p_2021.1.0.2681_offline.dmg
  MACOS_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17444/m_RenderKit_p_2021.1.0.626_offline.dmg
  LINUX_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic,intel-oneapi-compiler-fortran,intel-oneapi-compiler-dpcpp-cpp
  ONEAPI_RELEASE: 2021.1.1

jobs:
  build_windows_all_offline:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: install_basekit
      run: scripts/install_windows.bat $WINDOWS_BASEKIT_URL
    - name: install_hpckit
      run: scripts/install_windows.bat $WINDOWS_HPCKIT_URL
    - name: install_iotkit
      run: scripts/install_windows.bat $WINDOWS_IOTKIT_URL
    - name: install_renderkit
      run: scripts/install_windows.bat $WINDOWS_RENDERKIT_URL
    - name: build_c++
      run: scripts/build_windows.bat c++ - $ONEAPI_RELEASE
    - name: build_fortran
      run: scripts/build_windows.bat fortran - $ONEAPI_RELEASE
    - name: build_dpc++
      run: scripts/build_windows.bat dpc++ - $ONEAPI_RELEASE

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          extract.log
          bootstrapper*
          installer*
        retention-days: 7

  build_linux_all_offline:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: install_basekit
      run: scripts/install_linux.sh $LINUX_BASEKIT_URL intel.oneapi.lin.dpcpp-compiler
    - name: install_hpckit
      run: scripts/install_linux.sh $LINUX_HPCKIT_URL
    - name: install_iotkit
      run: scripts/install_linux.sh $LINUX_IOTKIT_URL
    - name: install_aikit
      run: scripts/install_linux.sh $LINUX_AIKIT_URL
    - name: install_dlfdkit
      run: scripts/install_linux.sh $LINUX_DLFDKIT_URL
    - name: install_renderkit
      run: scripts/install_linux.sh $LINUX_RENDERKIT_URL
    - name: build_c++
      run: scripts/build_linux.sh c++ $ONEAPI_RELEASE
    - name: build_fortran
      run: scripts/build_linux.sh fortran $ONEAPI_RELEASE
    - name: build_fortran
      run: scripts/build_linux.sh dpc++ $ONEAPI_RELEASE

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          bootstrapper*
          installer*
        retention-days: 7

  build_linux_apt:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: setup apt repo
      run: scripts/setup_apt_repo_linux.sh
    - name: install
      run: scripts/install_linux_apt.sh $LINUX_COMPONENTS
    - name: build
      run: scripts/build_linux.sh c++ $ONEAPI_RELEASE
    - name: build
      run: scripts/build_linux.sh fortran $ONEAPI_RELEASE
    - name: build
      run: scripts/build_linux.sh dpc++ $ONEAPI_RELEASE

  build_macos_all_offline:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: install_basekit
      run: scripts/install_macos.sh $MACOS_BASEKIT_URL
    - name: install_hpckit
      run: scripts/install_macos.sh $MACOS_HPCKIT_URL
    - name: install_renderkit
      run: scripts/install_macos.sh $MACOS_RENDERKIT_URL
    - name: build_c++
      run: scripts/build_macos.sh c++
    - name: build_fortran
      run: scripts/build_macos.sh fortran

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          bootstrapper*
          installer*
        retention-days: 7

  build_linux_container_basekit:
    runs-on: ubuntu-20.04
    container: intel/oneapi-basekit
    steps:
      - uses: actions/checkout@v2
      - name: install_git
        run: apt update && apt install -y git
      - name: build
        run: scripts/build_linux.sh dpc++ $ONEAPI_RELEASE

  build_linux_container_hpckit:
    runs-on: ubuntu-20.04
    container: intel/oneapi-hpckit
    steps:
      - uses: actions/checkout@v2
      - name: install_git
        run: apt update && apt install -y git
      - name: build
        run: scripts/build_linux.sh c++ $ONEAPI_RELEASE
      - name: build
        run: scripts/build_linux.sh fortran $ONEAPI_RELEASE

  build_linux_container_iotkit:
    runs-on: ubuntu-20.04
    container: intel/oneapi-iotkit
    steps:
      - uses: actions/checkout@v2
      - name: install_git
        run: apt update && apt install -y git
      - name: build
        run: scripts/build_linux.sh c++ $ONEAPI_RELEASE

  build_linux_container_dlfdkit:
    runs-on: ubuntu-20.04
    container: intel/oneapi-dlfdkit
    steps:
      - uses: actions/checkout@v2
      - name: install_git
        run: apt update && apt install -y git

  build_linux_container_aikit:
    runs-on: ubuntu-20.04
    container: intel/oneapi-aikit
    steps:
      - uses: actions/checkout@v2
      - name: install_git
        run: apt update && apt install -y git
