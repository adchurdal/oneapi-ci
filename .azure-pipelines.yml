# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

trigger:
- master

variables:
  - name: WINDOWS_BASEKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/17191/w_BaseKit_b_2021.1.10.2260_offline.exe
  - name: WINDOWS_HPCKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/17163/w_HPCKit_b_2021.1.10.2266_offline.exe
  - name: MACOS_HPCKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/17230/m_HPCKit_b_2021.1.10.2260.dmg
  - name: WINDOWS_CPP_COMPONENTS
    value: intel.oneapi.win.cpp-compiler
  - name: WINDOWS_FORTRAN_COMPONENTS
    value: intel.oneapi.win.ifort-compiler
  - name: WINDOWS_DPCPP_COMPONENTS
    value: intel.oneapi.win.dpcpp-compiler
  - name: LINUX_CPP_COMPONENTS
    value: intel-oneapi-dpcpp-cpp-compiler-pro
  - name: LINUX_FORTRAN_COMPONENTS
    value: intel-oneapi-ifort
  - name: LINUX_DPCPP_COMPONENTS
    value: intel-oneapi-dpcpp-cpp-compiler
  - name: MACOS_CPP_COMPONENTS
    value: intel.oneapi.mac.cpp-compiler
  - name: MACOS_FORTRAN_COMPONENTS
    value: intel.oneapi.mac.ifort-compiler

resources:
    containers:
      - container: oneapi-hpckit
        image: intel/oneapi-hpckit:latest
        options: '-v /usr/bin/sudo:/usr/bin/sudo -v /usr/lib/sudo/libsudo_util.so.0:/usr/lib/sudo/libsudo_util.so.0 -v /usr/lib/sudo/sudoers.so:/usr/lib/sudo/sudoers.so'
      - container: oneapi-basekit
        image: intel/oneapi-basekit:latest
        options: '-v /usr/bin/sudo:/usr/bin/sudo -v /usr/lib/sudo/libsudo_util.so.0:/usr/lib/sudo/libsudo_util.so.0 -v /usr/lib/sudo/sudoers.so:/usr/lib/sudo/sudoers.so'

jobs:
- job: build_windows_cpp
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Cache@2
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\compiler
      key: '"test1" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_CPP_COMPONENTS)" | compiler | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_windows.bat $(WINDOWS_HPCKIT_URL) $(WINDOWS_CPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_windows.bat c++
    displayName: build
  - bash: scripts/cache_exclude_windows.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: always()
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_windows_fortran
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Cache@2
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\compiler
      key: '"test1" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_FORTRAN_COMPONENTS)" | "compiler" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_windows.bat $(WINDOWS_HPCKIT_URL) $(WINDOWS_FORTRAN_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_windows.bat fortran
    displayName: build
  - bash: scripts/cache_exclude_windows.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: always()
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_windows_dpcpp
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Cache@2 # multiple paths per cache not supported yet. See https://github.com/microsoft/azure-pipelines-agent/pull/2834
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\compiler
      key: '"test1" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "compiler" | scripts/cache_exclude_windows.sh'
  - task: Cache@2
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\tbb
      key: '"test1" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "tbb" | scripts/cache_exclude_windows.sh'
  - task: Cache@2
    inputs:
      path: C:\Windows\System32\OpenCL.dll
      key: '"test1" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "opencl" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_windows.bat $(WINDOWS_BASEKIT_URL) $(WINDOWS_DPCPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_windows.bat dpc++
    displayName: build
  - bash: scripts/cache_exclude_windows.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: always()
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_linux_apt_cpp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: scripts/setup_apt_repo_linux.sh
    displayName: setup apt repo
  - script: scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
    displayName: collect versioned dependencies of apt packages
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"test1" | "$(LINUX_CPP_COMPONENTS)" | depends.txt | "compiler" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux_apt.sh $(LINUX_CPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh c++
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

- job: build_linux_apt_fortran
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: scripts/setup_apt_repo_linux.sh
    displayName: setup apt repo
  - script: scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
    displayName: collect versioned dependencies of apt packages
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"test1" | "$(LINUX_FORTRAN_COMPONENTS)" | depends.txt | "compiler" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux_apt.sh $(LINUX_FORTRAN_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh fortran
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

- job: build_linux_apt_dpcpp
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: scripts/setup_apt_repo_linux.sh
    displayName: setup apt repo
  - script: scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
    displayName: collect versioned dependencies of apt packages
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"test1" | "$(LINUX_DPCPP_COMPONENTS)" | depends.txt | "compiler" | scripts/cache_exclude_linux.sh'
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/tbb
      key: '"test1" | "$(LINUX_DPCPP_COMPONENTS)" | depends.txt | "tbb" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux_apt.sh $(LINUX_DPCPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh dpc++
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

- job: build_linux_container_cpp
  pool:
    vmImage: 'ubuntu-20.04'
  container: oneapi-hpckit
  steps:
    - script: sudo apt-get update && sudo apt-get install -y git
      displayName: install_git
    - script: scripts/build_linux.sh c++
      displayName: build

- job: build_linux_container_fortran
  pool:
    vmImage: 'ubuntu-20.04'
  container: oneapi-hpckit
  steps:
    - script: sudo apt-get update && sudo apt-get install -y git
      displayName: install_git
    - script: scripts/build_linux.sh fortran
      displayName: build

- job: build_linux_container_dpcpp
  pool:
    vmImage: 'ubuntu-20.04'
  container: oneapi-basekit
  steps:
    - script: sudo apt-get update && sudo apt-get install -y git
      displayName: install_git
    - script: scripts/build_linux.sh dpc++
      displayName: build

- job: build_macOS_cpp
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      sudo mkdir -p /opt/intel
      sudo chown $USER /opt/intel
    displayName: prepare for cache restore
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi
      key: '"test1" | "$(MACOS_HPCKIT_URL)" | "$(MACOS_CPP_COMPONENTS)"'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_macos.sh $(MACOS_HPCKIT_URL) $(MACOS_CPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_macos.sh c++
    displayName: build

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: always()
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_macOS_fortran
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      sudo mkdir -p /opt/intel
      sudo chown $USER /opt/intel
    displayName: prepare for cache restore
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi
      key: '"test1" | "$(MACOS_HPCKIT_URL)" | "$(MACOS_FORTRAN_COMPONENTS)"'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_macos.sh $(MACOS_HPCKIT_URL) $(MACOS_FORTRAN_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_macos.sh fortran
    displayName: build

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: always()
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)
