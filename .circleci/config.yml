# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

version: 2.1

orbs:
  win: circleci/windows@2.4.0

jobs:
  build_windows_cpp:
    environment:
      WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17163/w_HPCKit_b_2021.1.10.2266_offline.exe
      WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - restore_cache:
          keys:
            - test1-{{ .Environment.WINDOWS_HPCKIT_URL }}-{{ .Environment.WINDOWS_CPP_COMPONENTS }}-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
      - run:
          name: install
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_CPP_COMPONENTS
      - run:
          name: build
          command: scripts/build_windows.bat c++ 2017_build_tools
      - run:
          name: exclude unused files from cache
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/cache_exclude_windows.sh
      - save_cache:
          key: test1-{{ .Environment.WINDOWS_HPCKIT_URL }}-{{ .Environment.WINDOWS_CPP_COMPONENTS }}-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
          paths:
            - C:\Program Files (x86)\Intel\oneAPI\compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs
          when: always
      - store_artifacts:
          path: InstallLogs

  build_windows_fortran:
    environment:
      WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17163/w_HPCKit_b_2021.1.10.2266_offline.exe
      WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - restore_cache:
          keys:
            - test1-{{ .Environment.WINDOWS_HPCKIT_URL }}-{{ .Environment.WINDOWS_FORTRAN_COMPONENTS }}-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
      - run:
          name: install
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_FORTRAN_COMPONENTS
      - run:
          name: build
          command: scripts/build_windows.bat fortran 2017_build_tools
      - run:
          name: exclude unused files from cache
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/cache_exclude_windows.sh
      - save_cache:
          key: test1-{{ .Environment.WINDOWS_HPCKIT_URL }}-{{ .Environment.WINDOWS_FORTRAN_COMPONENTS }}-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
          paths:
            - C:\Program Files (x86)\Intel\oneAPI\compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs
          when: always
      - store_artifacts:
          path: InstallLogs

  build_windows_dpcpp:
    environment:
      WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17191/w_BaseKit_b_2021.1.10.2260_offline.exe
      WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - restore_cache:
          keys:
            - test1-{{ .Environment.WINDOWS_BASEKIT_URL }}-{{ .Environment.WINDOWS_DPCPP_COMPONENTS }}-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
      - run:
          name: install
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/install_windows.bat $WINDOWS_BASEKIT_URL $WINDOWS_DPCPP_COMPONENTS
      - run:
          name: build
          command: scripts/build_windows.bat dpc++ 2017_build_tools
      - run:
          name: exclude unused files from cache
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/cache_exclude_windows.sh
      - save_cache:
          key: test1-{{ .Environment.WINDOWS_BASEKIT_URL }}-{{ .Environment.WINDOWS_DPCPP_COMPONENTS }}-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
          paths:
            - C:\Program Files (x86)\Intel\oneAPI\compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_apt_cpp:
    environment:
      LINUX_CPP_COMPONENTS: intel-oneapi-dpcpp-cpp-compiler-pro
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
      - restore_cache:
          keys:
            - test1-{{ .Environment.LINUX_CPP_COMPONENTS }}-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh $LINUX_CPP_COMPONENTS
      - run:
          name: build
          command: scripts/build_linux.sh c++
      - run:
          name: exclude unused files from cache
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: test1-{{ .Environment.LINUX_CPP_COMPONENTS }}-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_apt_fortran:
    environment:
      LINUX_FORTRAN_COMPONENTS: intel-oneapi-ifort
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh $LINUX_FORTRAN_COMPONENTS | tee depends.txt
      - restore_cache:
          keys:
            - test1-{{ .Environment.LINUX_FORTRAN_COMPONENTS }}-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh $LINUX_FORTRAN_COMPONENTS
      - run:
          name: build
          command: scripts/build_linux.sh fortran
      - run:
          name: exclude unused files from cache
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: test1-{{ .Environment.LINUX_FORTRAN_COMPONENTS }}-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_apt_dpcpp:
    environment:
      LINUX_DPCPP_COMPONENTS: intel-oneapi-dpcpp-cpp-compiler
    docker:
      - image: ubuntu:latest
    steps:
      - run:
          name: set environment variables
          command: |
            export LINUX_DPCPP_COMPONENTS=intel-oneapi-dpcpp-cpp-compiler
      - checkout
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh $LINUX_DPCPP_COMPONENTS | tee depends.txt
      - restore_cache:
          keys:
            - test1-{{ .Environment.LINUX_DPCPP_COMPONENTS }}-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh $LINUX_DPCPP_COMPONENTS
      - run:
          name: build
          command: scripts/build_linux.sh dpc++
      - run:
          name: exclude unused files from cache
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: test1-{{ .Environment.LINUX_DPCPP_COMPONENTS }}-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_container_cpp:
    docker:
      - image: intel/oneapi-hpckit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh c++

  build_linux_container_fortran:
    docker:
      - image: intel/oneapi-hpckit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh fortran

  build_linux_container_dpcpp:
    docker:
      - image: intel/oneapi-basekit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh dpc++

workflows:
  build-all:
    jobs:
    - build_windows_cpp
    - build_windows_fortran
    - build_windows_dpcpp
    - build_linux_apt_cpp
    - build_linux_apt_fortran
    - build_linux_apt_dpcpp
    - build_linux_container_cpp
    - build_linux_container_fortran
    - build_linux_container_dpcpp
